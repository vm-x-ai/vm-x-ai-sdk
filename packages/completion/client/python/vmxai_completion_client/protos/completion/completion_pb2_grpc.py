# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from vmxai_completion_client.protos.completion import completion_pb2 as vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2


class CompletionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_stream(
                '/llm.chat.CompletionService/create',
                request_serializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.CompletionRequest.SerializeToString,
                response_deserializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.CompletionResponse.FromString,
                )
        self.getResourceProviderCount = channel.unary_unary(
                '/llm.chat.CompletionService/getResourceProviderCount',
                request_serializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.GetResourceProviderCountRequest.SerializeToString,
                response_deserializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.GetResourceProviderCountResponse.FromString,
                )


class CompletionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getResourceProviderCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompletionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_stream_rpc_method_handler(
                    servicer.create,
                    request_deserializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.CompletionRequest.FromString,
                    response_serializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.CompletionResponse.SerializeToString,
            ),
            'getResourceProviderCount': grpc.unary_unary_rpc_method_handler(
                    servicer.getResourceProviderCount,
                    request_deserializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.GetResourceProviderCountRequest.FromString,
                    response_serializer=vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.GetResourceProviderCountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'llm.chat.CompletionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CompletionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/llm.chat.CompletionService/create',
            vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.CompletionRequest.SerializeToString,
            vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.CompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getResourceProviderCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/llm.chat.CompletionService/getResourceProviderCount',
            vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.GetResourceProviderCountRequest.SerializeToString,
            vmxai__completion__client_dot_protos_dot_completion_dot_completion__pb2.GetResourceProviderCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
